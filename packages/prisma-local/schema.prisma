generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  phoneNumber   String?   @unique
  email         String?   @unique
  name          String?
  avatarUrl     String?
  devices       Device[]
  contacts      Contact[] // user contacts imported
  conversations ConversationMember[]
  messagesSent  Message[] @relation("sender")
  createdAt     DateTime  @default(now())
}

model Device {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  publicKey    String?  // for E2EE future
  lastSeenAt   DateTime?
  createdAt    DateTime @default(now())
}

model Conversation {
  id            String        @id @default(cuid())
  title         String?
  isGroup       Boolean       @default(false)
  members       ConversationMember[]
  messages      Message[]     @orderBy([createdAt])
  lastMessageAt DateTime?
  createdAt     DateTime      @default(now())
}

model ConversationMember {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  isAdmin        Boolean      @default(false)
  mutedUntil     DateTime?
  joinedAt       DateTime     @default(now())
}

model Message {
  id             String      @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User?       @relation("sender", fields: [senderId], references: [id])
  senderId       String?
  body           String?
  mediaUrl       String?
  mediaType      String?     // image/audio/video
  status         MessageStatus @default(SENT)
  replyToId      String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?
  deliveredTo    Delivered[]
  readBy         ReadReceipt[]
}

model ReadReceipt {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  readAt    DateTime @default(now())
}

model Delivered {
  id        String  @id @default(cuid())
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  deliveredAt DateTime @default(now())
}

model Contact {
  id        String @id @default(cuid())
  owner     User   @relation(fields: [ownerId], references: [id])
  ownerId   String
  contactId String? // if contact is app user
  name      String?
  phone     String
}
enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}
